name: Pull Request Workflow

on:
  pull_request:
    branches: [ master ]  # 仅当 Pull Request 目标分支是 main 时触发

jobs:
  Run_Milvus:
    strategy:
      fail-fast: false
      matrix:
#        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        os: ["macos-latest"]
    runs-on: ${{ matrix.os }}

    outputs:
      host: ${{ steps.db_info.outputs.host }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # 检出代码

      - if : runner.os == 'macOS'
        name: Environment dependence
        uses: ./.github/actions/dependence
        with:
          java: "11"

      - if : runner.os != 'macOS'
        name: Environment dependence
        uses: ./.github/actions/dependence
        with:
          java: "8"

      - name: Run DB
        uses: ./.github/actions/dbRunner
        with:
          DB-name: "VectorDB"

      - name: Run Nginx in Docker
        run: |
          # 拉取官方 Nginx 镜像
          docker pull nginx:latest
          
          # 运行 Nginx 容器
          docker run -d -p 8181:80 --name my-nginx nginx:latest

      - name: Check Nginx is running
        run: |
          # 等待几秒钟以确保 Nginx 完全启动
          sleep 5
          
          # 检查 Nginx 是否正在运行
          if docker ps | grep -q "my-nginx"; then
            echo "Nginx is running."
          else
            echo "Nginx is not running."
            exit 1
          fi

      - name: Verify Nginx response
        run: |
          # 使用 curl 检查 Nginx 是否响应
          if curl -s http://localhost:8181 | grep -q "Welcome to nginx!"; then
            echo "Nginx is responding correctly."
          else
            echo "Nginx is not responding correctly."
          fi

      - name: Network test
        shell: bash
        run: |
          docker ps
          echo "netstat -an"
#          netstat -an | grep 8181
#          netstat -an | grep 1953
          lsof -i :8181
          lsof -i :1953
          
          sudo netstat -an
          sudo netstat -an | grep 8181
          docker ps -a

      - name: Set output
        id: db_info
        run: |
          echo "host=$(hostname -I | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: network test
        shell: bash
        run: |
          for port in 19530 19531 19532; do
            if netstat -an | grep -q ".*:$port.*LISTEN"; then
              echo "Port $port is open."
            else
              echo "Port $port is not open."
            fi
          done

      - name: Run tests
        shell: bash
        run: |
          mvn clean package

#  job2:
#    runs-on: windows-latest
#    needs: Run_Milvus  # 确保 job1 完成后再运行 job2
#    env:
#      host: ${{ needs.Run_Milvus.outputs.host }}
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Access the service
#        run: |
#          Invoke-WebRequest -Uri http://${{ env.host }}:8080
#          Write-Host "Service is accessible from job2!"

#  Java-Test:
#    needs: Run_Milvus
#    strategy:
#      matrix:
#        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
#
#    runs-on: ${{ matrix.os }}
#    env:
#      host: ${{ needs.Run_Milvus.outputs.host }}
#
#    steps:
#      - name: show env
#        shell: bash
#        run: |
#          echo "${{ env.host }}"
#
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: replace host
#        run: |
#          sed -i"" -e "s/127.0.0.1/${{ env.host }}/g" src/main/java/org/example/MilvusTest.java
#          sed -i"" -e "s/127.0.0.1/${{ env.host }}/g" src/main/java/org/example/MilvusTest1.java
#          sed -i"" -e "s/127.0.0.1/${{ env.host }}/g" src/main/java/org/example/MilvusTest2.java




#      - if : runner.os == 'macOS'
#        name: Environment dependence
#        uses: ./.github/actions/dependence
#        with:
#          java: "11"
#
#      - if : runner.os != 'macOS'
#        name: Environment dependence
#        uses: ./.github/actions/dependence
#        with:
#          java: "8"
#
#      - name: network test
#        shell: bash
#        run: |
#          for port in 19530 19531 19532; do
#            if ss -tuln | grep -q ":$port "; then
#              echo "Port $port is open."
#            else
#              echo "Port $port is not open."
#            fi
#          done
#
#      - name: Run tests
#        shell: bash
#        run: |
#          mvn clean package



#      - if: runner.os == 'Windows'
#        name: Verify Docker installation on Windows
#        shell: pwsh
#        run: |
#          $env:Path += ";${{ github.workspace }}"
#          docker --version
#          docker-compose --version
#
#      - if: runner.os != 'Windows'
#        name: Verify Docker installation
#        shell: bash
#        run: |
#          docker --version
#          docker-compose --version
#
#      - name: Run Milvus DB
#        uses: ./.github/workflows/actions/service/milvus
#        with:
#          stop: false
#          clean: false
#          start: true
#          ports: 19530 19531 19532
#
#
#      - name: Run tests
#        shell: bash
#        run: |
#          docker ps -a
#          if ss -tuln | grep -q ":19530 "; then
#            echo "Port 19530 is open."
#          else
#            echo "Port 19530 is not open."
#          fi
#          mvn test  # 运行测试

