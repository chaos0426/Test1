name: Pull Request Workflow

on:
  pull_request:
    branches: [ master ]  # 仅当 Pull Request 目标分支是 main 时触发

jobs:
  job1:
    runs-on: ubuntu-latest
    services:
      myservice:
        image: nginx:latest  # 使用 nginx 作为示例服务
        ports:
          - 8080:80  # 将服务端口映射到主机端口
        options: >-
          --health-cmd="curl --fail http://localhost/ || exit 1"  
          --health-interval=5s  
          --health-timeout=5s  
          --health-retries=3  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Wait for the service to be ready
        run: |
          echo "Waiting for the service to be ready..."  
          until curl --output /dev/null --silent --head --fail http://localhost:8080; do  
            printf '.'  
            sleep 5  
          done  
          echo "Service is up!"  

  job2:
    runs-on: windows-latest
    needs: job1  # 确保 job1 完成后再运行 job2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Access the service
        run: |
          Invoke-WebRequest -Uri http://localhost:8080  
          Write-Host "Service is accessible from job2!"  

#  Run_Milvus:
#    strategy:
#      fail-fast: false
#      matrix:
##        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
#        os: ["ubuntu-latest", "macos-latest"]
#    runs-on: ${{ matrix.os }}
#
#    outputs:
#      host: ${{ steps.db_info.outputs.host }}
#
#
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4  # 检出代码
#
#      - if : runner.os == 'macOS'
#        name: Environment dependence
#        uses: ./.github/actions/dependence
#        with:
#          java: "11"
#
#      - if : runner.os != 'macOS'
#        name: Environment dependence
#        uses: ./.github/actions/dependence
#        with:
#          java: "8"
#
#      - name: Run DB
#        uses: ./.github/actions/dbRunner
#        with:
#          DB-name: "VectorDB"
#
#      - name: Set output
#        id: db_info
#        run: |
#          echo "host=$(hostname -I | awk '{print $1}')" >> $GITHUB_OUTPUT
#
#      - name: network test
#        shell: bash
#        run: |
#          for port in 19530 19531 19532; do
#            if netstat -an | grep -q ".*:$port.*LISTEN"; then
#              echo "Port $port is open."
#            else
#              echo "Port $port is not open."
#            fi
#          done
#
#      - name: Run tests
#        shell: bash
#        run: |
#          mvn clean package

